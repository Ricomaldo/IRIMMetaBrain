// App.jsx
import React from 'react';
import { ThemeProvider } from 'styled-components';
import { theme } from './styles/theme';
import StudioHall from './components/layout/StudioHall/StudioHall';

function App() {
  return (
    <ThemeProvider theme={theme}>
      <StudioHall />
    </ThemeProvider>
  );
}

export default App;

// components/layout/StudioHall/StudioHall.jsx
import React, { useState } from 'react';
import { StudioContainer } from './StudioHall.styles';
import RoomCanvas from '../RoomCanvas/RoomCanvas';
import SideTower from '../SideTower/SideTower';

const StudioHall = () => {
  const [currentRoom, setCurrentRoom] = useState({ x: 1, y: 1 });

  return (
    <StudioContainer>
      <RoomCanvas currentRoom={currentRoom} onNavigate={setCurrentRoom} />
      <SideTower />
    </StudioContainer>
  );
};

export default StudioHall;

// components/layout/StudioHall/StudioHall.styles.js
import styled from 'styled-components';
import { flexCenter } from '../../../styles/mixins';

export const StudioContainer = styled.div`
  display: flex;
  height: 100vh;
  background: ${props => props.theme.colors.background};
`;

// components/layout/RoomCanvas/RoomCanvas.jsx
import React from 'react';
import { CanvasContainer, RoomsGrid, RoomSlot } from './RoomCanvas.styles';
import { roomConfig } from '../../../utils/roomPositions';

const RoomCanvas = ({ currentRoom, onNavigate }) => {
  const translateX = -currentRoom.x * 100;
  const translateY = -currentRoom.y * 100;

  return (
    <CanvasContainer>
      <RoomsGrid style={{ transform: `translate(${translateX}%, ${translateY}%)` }}>
        {roomConfig.map((room, index) => (
          <RoomSlot key={index} roomType={room.type}>
            {room.name}
          </RoomSlot>
        ))}
      </RoomsGrid>
    </CanvasContainer>
  );
};

export default RoomCanvas;

// components/layout/SideTower/SideTower.jsx
import React from 'react';
import { PanelContainer } from './SideTower.styles';
import ControlTower from './ControlTower/ControlTower';
import WorkbenchDrawer from './WorkbenchDrawer/WorkbenchDrawer';

const SideTower = () => {
  return (
    <PanelContainer>
      <ControlTower />
      <div style={{ flex: 1 }} /> {/* Spacer */}
      <WorkbenchDrawer />
    </PanelContainer>
  );
};

export default SideTower;

// components/layout/SideTower/ControlTower/ControlTower.jsx
import React from 'react';
import { TowerContainer, ButtonGroup } from './ControlTower.styles';
import IconButton from '../../../common/IconButton/IconButton';
import { controlButtons } from '../../../../utils/buttonMapping';

const ControlTower = () => {
  return (
    <TowerContainer>
      <div>ControlTower</div>
      <ButtonGroup>
        {controlButtons.map(button => (
          <IconButton
            key={button.id}
            icon={button.icon}
            label={button.label}
            onClick={button.action}
          />
        ))}
      </ButtonGroup>
    </TowerContainer>
  );
};

export default ControlTower;

// components/common/IconButton/IconButton.jsx
import React from 'react';
import { ButtonContainer, IconWrapper, Label } from './IconButton.styles';

const IconButton = ({ icon, label, onClick, active = false }) => {
  return (
    <ButtonContainer onClick={onClick} active={active}>
      <IconWrapper>{icon}</IconWrapper>
      <Label>{label}</Label>
    </ButtonContainer>
  );
};

export default IconButton;

// utils/buttonMapping.js
export const controlButtons = [
  { id: 'calendar', icon: '📅', label: 'Calendrier', action: () => console.log('Calendar') },
  { id: 'timer', icon: '⏱️', label: 'Timer', action: () => console.log('Timer') },
  { id: 'settings', icon: '⚙️', label: 'Config', action: () => console.log('Settings') }
];

export const workbenchButtons = [
  { id: 'github', icon: '🐙', label: 'GitHub', action: () => window.open('https://github.com') },
  { id: 'vscode', icon: '💻', label: 'VS Code', action: () => console.log('VS Code') },
  { id: 'arc', icon: '🌐', label: 'Arc', action: () => console.log('Arc') },
  { id: 'cursor', icon: '🎯', label: 'Cursor', action: () => console.log('Cursor') }
];

// utils/roomPositions.js
export const roomConfig = [
  // Row 0
  { x: 0, y: 0, type: 'empty', name: '' },
  { x: 1, y: 0, type: 'chambre', name: 'Chambre' },
  { x: 2, y: 0, type: 'empty', name: '' },
  { x: 3, y: 0, type: 'empty', name: '' },
  // Row 1
  { x: 0, y: 1, type: 'boutique', name: 'Boutique' },
  { x: 1, y: 1, type: 'atelier', name: 'Atelier' },
  { x: 2, y: 1, type: 'forge', name: 'Forge' },
  { x: 3, y: 1, type: 'empty', name: '' },
  // Row 2
  { x: 0, y: 2, type: 'empty', name: '' },
  { x: 1, y: 2, type: 'empty', name: '' },
  { x: 2, y: 2, type: 'empty', name: '' },
  { x: 3, y: 2, type: 'empty', name: '' }
];