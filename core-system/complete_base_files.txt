// App.jsx
import React from 'react';
import { ThemeProvider } from 'styled-components';
import { theme } from './styles/theme';
import StudioHall from './components/layout/StudioHall/StudioHall';

function App() {
  return (
    <ThemeProvider theme={theme}>
      <StudioHall />
    </ThemeProvider>
  );
}

export default App;

// hooks/useRoomNotes.js
import { useState } from 'react';

export const useRoomNotes = () => {
  const [notes, setNotes] = useState({
    chambre: '',
    atelier: '',
    forge: '',
    boutique: ''
  });

  const updateNote = (roomType, content) => {
    setNotes(prev => ({ ...prev, [roomType]: content }));
  };

  return { notes, updateNote };
};

// hooks/useRoomNavigation.js
import { useState } from 'react';
import { getAdjacentRooms, isValidPosition } from '../utils/roomPositions';

export const useRoomNavigation = () => {
  const [currentRoom, setCurrentRoom] = useState({ x: 1, y: 1 });

  const navigateToRoom = (direction) => {
    const adjacentRooms = getAdjacentRooms(currentRoom);
    const targetRoom = adjacentRooms[direction];
    
    if (isValidPosition(targetRoom)) {
      setCurrentRoom(targetRoom);
    }
  };

  const getAvailableDirections = () => {
    const adjacent = getAdjacentRooms(currentRoom);
    return {
      up: isValidPosition(adjacent.up),
      down: isValidPosition(adjacent.down),
      left: isValidPosition(adjacent.left),
      right: isValidPosition(adjacent.right)
    };
  };

  return {
    currentRoom,
    navigateToRoom,
    getAvailableDirections
  };
};

// components/layout/StudioHall/StudioHall.jsx
import React from 'react';
import { StudioContainer } from './StudioHall.styles';
import RoomCanvas from '../RoomCanvas/RoomCanvas';
import SideTower from '../SideTower/SideTower';
import { useRoomNotes } from '../../../hooks/useRoomNotes';
import { useRoomNavigation } from '../../../hooks/useRoomNavigation';

const StudioHall = () => {
  const roomNotesHook = useRoomNotes();
  const roomNavHook = useRoomNavigation();

  return (
    <StudioContainer>
      <RoomCanvas 
        roomNavHook={roomNavHook}
        roomNotesHook={roomNotesHook}
      />
      <SideTower />
    </StudioContainer>
  );
};

export default StudioHall;

// components/layout/RoomCanvas/RoomCanvas.jsx
import React from 'react';
import { 
  CanvasContainer, 
  RoomsGrid, 
  RoomSlot, 
  NavigationZone 
} from './RoomCanvas.styles';
import RoomNote from '../../rooms/RoomNote/RoomNote';
import { roomConfig } from '../../../utils/roomPositions';
import { wireframeColors } from '../../../utils/assetMapping';

const RoomCanvas = ({ roomNavHook, roomNotesHook }) => {
  const { currentRoom, navigateToRoom, getAvailableDirections } = roomNavHook;
  const availableDirections = getAvailableDirections();
  
  const translateX = -currentRoom.x * 100;
  const translateY = -currentRoom.y * 100;

  const handleNavigationClick = (direction) => {
    navigateToRoom(direction);
  };

  return (
    <CanvasContainer>
      <RoomsGrid style={{ transform: `translate(${translateX}%, ${translateY}%)` }}>
        {roomConfig.map((room, index) => (
          <RoomSlot 
            key={index} 
            roomType={room.type} 
            background={room.background}
            roomColors={wireframeColors}
          >
            {room.name}
            {room.type !== 'empty' && (
              <RoomNote 
                roomType={room.type}
                roomNotesHook={roomNotesHook}
              />
            )}
          </RoomSlot>
        ))}
      </RoomsGrid>
      
      {availableDirections.up && (
        <NavigationZone 
          className="zone-top" 
          onClick={() => handleNavigationClick('up')} 
        />
      )}
      {availableDirections.down && (
        <NavigationZone 
          className="zone-bottom" 
          onClick={() => handleNavigationClick('down')} 
        />
      )}
      {availableDirections.left && (
        <NavigationZone 
          className="zone-left" 
          onClick={() => handleNavigationClick('left')} 
        />
      )}
      {availableDirections.right && (
        <NavigationZone 
          className="zone-right" 
          onClick={() => handleNavigationClick('right')} 
        />
      )}
    </CanvasContainer>
  );
};

export default RoomCanvas;

// components/layout/SideTower/SideTower.jsx
import React from 'react';
import { TowerContainer } from './SideTower.styles';
import ControlTower from './ControlTower/ControlTower';
import WorkbenchDrawer from './WorkbenchDrawer/WorkbenchDrawer';

const SideTower = () => {
  return (
    <TowerContainer>
      <ControlTower />
      <div style={{ flex: 1 }} />
      <WorkbenchDrawer />
    </TowerContainer>
  );
};

export default SideTower;

// components/layout/SideTower/ControlTower/ControlTower.jsx
import React from 'react';
import { TowerContainer, ButtonGroup } from './ControlTower.styles';
import IconButton from '../../../common/IconButton/IconButton';
import { controlButtons } from '../../../../utils/buttonMapping';

const ControlTower = () => {
  return (
    <TowerContainer>
      <div>ControlTower</div>
      <ButtonGroup>
        {controlButtons.map(button => (
          <IconButton 
            key={button.id}
            icon={button.icon}
            label={button.label}
            onClick={button.action}
          />
        ))}
      </ButtonGroup>
    </TowerContainer>
  );
};

export default ControlTower;

// components/layout/SideTower/WorkbenchDrawer/WorkbenchDrawer.jsx
import React from 'react';
import { DrawerContainer, ToolGrid } from './WorkbenchDrawer.styles';
import IconButton from '../../../common/IconButton/IconButton';
import { workbenchButtons } from '../../../../utils/buttonMapping';

const WorkbenchDrawer = () => {
  return (
    <DrawerContainer>
      <div>WorkbenchDrawer</div>
      <ToolGrid>
        {workbenchButtons.map(button => (
          <IconButton 
            key={button.id}
            icon={button.icon}
            label={button.label}
            onClick={button.action}
          />
        ))}
      </ToolGrid>
    </DrawerContainer>
  );
};

export default WorkbenchDrawer;

// components/common/IconButton/IconButton.jsx
import React from 'react';
import { ButtonContainer, IconWrapper, Label } from './IconButton.styles';

const IconButton = ({ icon, label, onClick, active = false }) => {
  return (
    <ButtonContainer onClick={onClick} active={active}>
      <IconWrapper>{icon}</IconWrapper>
      <Label>{label}</Label>
    </ButtonContainer>
  );
};

export default IconButton;

// components/rooms/RoomNote/RoomNote.jsx
import React, { useState } from 'react';
import { NoteContainer, NoteHeader, NoteContent, NoteTextarea } from './RoomNote.styles';
import { icons } from '../../../utils/assetMapping';

const RoomNote = ({ roomType, roomNotesHook }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const { notes, updateNote } = roomNotesHook;

  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <NoteContainer onClick={(e) => e.stopPropagation()}>
      <NoteHeader onClick={toggleExpanded}>
        {icons.note} {isExpanded ? icons.collapse : icons.expand}
      </NoteHeader>
      {isExpanded && (
        <NoteContent>
          <NoteTextarea
            value={notes[roomType] || ''}
            onChange={(e) => updateNote(roomType, e.target.value)}
            placeholder={`Notes ${roomType}...`}
          />
        </NoteContent>
      )}
    </NoteContainer>
  );
};

export default RoomNote;